import MySqlConfig from '@databases/mysql-config';
import type {Schema} from '@databases/mysql-schema-introspect';
import {
  getIgnoreTest,
  PrintContext,
  writeFiles,
} from '@databases/shared-print-types';
import MySqlPrintOptions from './MySqlPrintOptions';
import printSchemaInner from './printers/printSchema';

const GENERATED_STATEMENT = 'Generated by: @databases/pg-schema-print-types';

export type Options = Omit<Partial<MySqlConfig['types']>, 'directory'>;

function filterSchema(unfilteredSchema: Schema, options: Options): Schema {
  const isTableIgnored = getIgnoreTest(options);
  return {
    tables: unfilteredSchema.tables
      .filter((t) => !isTableIgnored(t.tableName))
      .map((t) => ({
        ...t,
        constraints: t.constraints.filter(
          (c) =>
            !isTableIgnored(c.tableName) &&
            !c.columns.some(
              (c) =>
                c.referenced?.tableName &&
                isTableIgnored(c.referenced.tableName),
            ),
        ),
      })),
  };
}

function getPrinter(unfilteredSchema: Schema, options: Options) {
  const schema = filterSchema(unfilteredSchema, options);
  const opts = new MySqlPrintOptions(options, schema);
  const context = new PrintContext(opts);
  printSchemaInner(schema, context, opts);
  return context;
}

export function printSchema(schema: Schema, options: Options = {}) {
  return getPrinter(schema, options).getFiles();
}

export async function writeSchema(
  schema: Schema,
  directory: string,
  options: Options = {},
) {
  await writeFiles({
    context: getPrinter(schema, options),
    directory,
    generatedStatement: GENERATED_STATEMENT,
  });
}
