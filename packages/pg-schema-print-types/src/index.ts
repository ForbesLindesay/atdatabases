import PgConfig from '@databases/pg-config';
import PgDataTypeID from '@databases/pg-data-type-id';
import type {Schema} from '@databases/pg-schema-introspect';
import {writeFiles} from '@databases/shared-print-types';
import PgPrintContext from './PgPrintContext';
import getTypeScriptType from './getTypeScriptType';
import PrintOptions from './PgPrintOptions';
import printSchemaInner from './printers/printSchema';

const GENERATED_STATEMENT = 'Generated by: @databases/pg-schema-print-types';

export {PgDataTypeID};
export type Options = Omit<Partial<PgConfig['types']>, 'directory'>;

export function printSchema(schema: Schema, options: Options = {}) {
  const printContext = new PgPrintContext(
    getTypeScriptType,
    schema,
    new PrintOptions(options),
  );
  printSchemaInner(schema, printContext);
  return printContext.printer.getFiles();
}

export async function writeSchema(
  schema: Schema,
  directory: string,
  options: Options = {},
) {
  const context = new PgPrintContext(
    getTypeScriptType,
    schema,
    new PrintOptions(options),
  );
  printSchemaInner(schema, context);
  await writeFiles({
    context: context.printer,
    directory,
    generatedStatement: GENERATED_STATEMENT,
  });
}
