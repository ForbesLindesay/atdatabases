/**
 * !!! This file is autogenerated do not edit by hand !!!
 *
 * Generated by: @databases/pg-schema-print-types
 * Checksum: ttUDcakIswXGcCdR8gyhOS/oPvWUpG/EnX+jA/fXjLsUNqW0m5Kog8j/OYsSUnKSSnP9wBzKgL6D+fX/i/XaCQ==
 */

/* eslint-disable */
// tslint:disable

import Partitioned, {Partitioned_InsertParameters} from './partitioned';
import PartitionedP0, {PartitionedP0_InsertParameters} from './partitioned_p0';
import PartitionedP1, {PartitionedP1_InsertParameters} from './partitioned_p1';
import Photo, {Photos_InsertParameters} from './photos';
import User, {Users_InsertParameters} from './users';

interface DatabaseSchema {
  partitioned: {record: Partitioned; insert: Partitioned_InsertParameters};
  partitioned_p0: {
    record: PartitionedP0;
    insert: PartitionedP0_InsertParameters;
  };
  partitioned_p1: {
    record: PartitionedP1;
    insert: PartitionedP1_InsertParameters;
  };
  photos: {record: Photo; insert: Photos_InsertParameters};
  users: {record: User; insert: Users_InsertParameters};
}
export default DatabaseSchema;

/**
 * JSON serialize values (v) if the table name (t) and column name (c)
 * is a JSON or JSONB column.
 * This is necessary if you want to store values that are not plain objects
 * in a JSON or JSONB column.
 */
function serializeValue(t: string, c: string, v: unknown): unknown {
  if (t === 'photos' && c === 'metadata') {
    return JSON.stringify(v);
  }
  return v;
}
export {serializeValue};
