/**
 * !!! This file is autogenerated do not edit by hand !!!
 *
 * Generated by: @databases/pg-schema-print-types
 * Checksum: pHamKO6TNhW31/Gc2rmkiJMonY5RD26sKXcBcYoIAJ9P6mncMpL6loEGluSMRTl5omsUBgovmHy74DNBiVKfwQ==
 */

/* eslint-disable */
// tslint:disable

import Photo, {Photos_InsertParameters} from './photos';
import User, {Users_InsertParameters} from './users';

interface DatabaseSchema {
  photos: {record: Photo; insert: Photos_InsertParameters};
  users: {record: User; insert: Users_InsertParameters};
}
export default DatabaseSchema;

/**
 * JSON serialize values (v) if the table name (t) and column name (c)
 * is a JSON or JSONB column.
 * This is necessary if you want to store values that are not plain objects
 * in a JSON or JSONB column.
 */
function serializeValue(t: string, c: string, v: unknown): unknown {
  if (t === 'photos' && c === 'metadata') {
    return JSON.stringify(v);
  }
  return v;
}
export {serializeValue};

/**
 * The table names and column names (along with their types) can help to
 * make pg-typed more reliable.
 *
 * You also must pass either "databaseSchema" or "serializeValue" to pg-typed
 * if you want to store anything other than plain objects in JSON or JSONB
 * columns
 */
const databaseSchema = [
  {
    name: 'photos',
    columns: [
      {
        name: 'caption',
        isNullable: true,
        hasDefault: false,
        typeId: 25,
        typeName: 'TEXT',
      },
      {
        name: 'cdn_url',
        isNullable: false,
        hasDefault: false,
        typeId: 25,
        typeName: 'TEXT',
      },
      {
        name: 'id',
        isNullable: false,
        hasDefault: true,
        typeId: 20,
        typeName: 'BIGINT',
      },
      {
        name: 'metadata',
        isNullable: false,
        hasDefault: false,
        typeId: 3802,
        typeName: 'JSONB',
      },
      {
        name: 'owner_user_id',
        isNullable: false,
        hasDefault: false,
        typeId: 20,
        typeName: 'BIGINT',
      },
    ],
  },
  {
    name: 'users',
    columns: [
      {
        name: 'age',
        isNullable: true,
        hasDefault: false,
        typeId: 23,
        typeName: 'INTEGER',
      },
      {
        name: 'bio',
        isNullable: true,
        hasDefault: false,
        typeId: 25,
        typeName: 'TEXT',
      },
      {
        name: 'id',
        isNullable: false,
        hasDefault: true,
        typeId: 20,
        typeName: 'BIGINT',
      },
      {
        name: 'screen_name',
        isNullable: false,
        hasDefault: false,
        typeId: 25,
        typeName: 'TEXT',
      },
    ],
  },
];
export {databaseSchema};
